#python#
---
##数据类型##
- 整型
- 字符串
	>Python源代码也是一个文本文件,为了让它按UTF-8编码读取，我们通常在文件开头写上这两行
	<pre>#!/usr/bin/env python
	# -*- coding: utf-8 -*-</pre>
- 浮点
- 布尔
- 空值
	>空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值
##格式化打印
- 常用占位符
	- %d 整数
	- %f	 浮点数
	- %s	 字符串
	- %x 十六进制整数
##tab补全命令
<pre># pwd
/usr/lib/python2.7

cat tab.py
#!/usr/bin/python   
# python startup file   
           
import sys   
import readline   
import rlcompleter   
import atexit   
import os    
# tab completion   
readline.parse_and_bind('tab: complete')   
# history file   
histfile = os.path.join(os.environ['HOME'], '.pythonhistory')   
try:   
    readline.read_history_file(histfile)   
except IOError:   
    pass   
atexit.register(readline.write_history_file, histfile)   
           
del os, histfile, readline, rlcompleter    
</pre>	
##运算符
- + - * /
##列表
- 主要方法
	>示例：
	><pre>classmates = ['Michael', 'Bob', 'Tracy']
	>>>> classmates
	['Michael', 'Bob', 'Tracy']</pre>
	- len
	>用len()函数可以获得list元素的个数
		<pre>>>> len(classmates)
		3
		</pre>
	- append
	>列表末尾追加
	- count
	>统计元素出现的次数
	- extend
	>将其他列表追加到当前列表中
	- index
	>用索引来访问list中每一个位置的元素，记得索引是从0开始的
	- insert
	>向列表中添加元素
	- pop
	>要删除list末尾的元素，用pop()方法  
	>要删除指定位置的元素，用pop(i)方法，其中i是索引位置
	- remove
	- reverse
	- sort
##元组
tuple一旦初始化就不能修改，也就是说append和insert方法会无法使用。  
示例：
<pre>>>> t = ('a', 'b', ['A', 'B'])
>>> t[2][0] = 'X'
>>> t[2][1] = 'Y'
>>> t
('a', 'b', ['X', 'Y'])</pre>
>这里之所以被修改，是因为修改了列表**['A', 'B']**
##字典
使用键-值（key-value）存储，具有极快的查找速度。  

- 避免key不存在的错误
	>有两种办法:  
	>1是通过in判断key是否存在,如：
	><pre>>>> 'Thomas' in d
	False</pre>
	>2是通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value： 
	><pre>>>> d.get('Thomas')
	>>> d.get('Thomas', -1)
	-1
	</pre>

- 字典（dict）和列表（list）的区别
	- 字典
	>- 查找和插入的速度极快，不会随着key的增加而增加
	>- 需要占用大量的内存，内存浪费多
	- 列表
	>- 查找和插入的时间随着元素的增加而增加
	>- 占用空间小，浪费内存很少 
##set##
set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。

- set的创建
	<pre>>>> s = set([1, 1, 2, 2, 3, 3])
	>>> s
	set([1, 2, 3])</pre>
	可以通过add(key)和remove(key)方法删除元素;可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作
##条件判读和循环
###条件判断
1. if  
根据Python的缩进规则，如果if语句判断是True，就把缩进的两行print语句执行了，否则，什么也不做,如
    <pre>age = 20
    if age >= 18:
      print 'your age is', age
      print 'adult'</pre>
2. if...else
	<pre>age = 3
	if age >= 18:
      print 'your age is', age
      print 'adult'
	else:
      print 'your age is', age
      print 'teenager'
	</pre>
3. if...elif...else
	<pre>if <条件判断1>:
        <执行1>
	elif <条件判断2>:
	    <执行2>
	elif <条件判断3>:
	    <执行3>
	else:
    <执行4></pre>
4. 小结
	<pre>cat if.py    
	#!/usr/bin/env python
	import random
	real_num = random.randrange(10)
	
	retry_count = 0
	while retry_count < 3:
	  guess_num=int(raw_input("Pls input a number:"))
	  if guess_num > real_num :
	    print "The number is great!"
	  elif guess_num < real_num :
	    print "The number is smaller!"
	  else:
	    print "you guess right,the number is %d" % real_num
	    break 
	  retry_count +=1
	else:
	  print "The real_num is %d" % real_num
	 </pre>
###循环###
>两种循环：`for...in`和`while`  

1. for...in循环   
	>for...in循环，依次把list或tuple中的每个元素迭代出来  
	
	示例1：
	<pre>names = ['Michael', 'Bob', 'Tracy']
	for name in names:
       print name</pre>
	示例2：打印1到100的和  
	* 函数range生成一个整数序列
	<pre>sum = 0
	for x in range(101):
    	sum = sum + x
    	print sum</pre>
2. while循环
	>只要条件满足，就不断循环，条件不满足时退出循环
##raw_input
从raw_input()读取的内容永远以字符串的形式返回,必须先把字符串转换为我们想要的类型。  
如转换为整型：  
	`birth = int(raw_input('birth: '))`
##函数
- 调用函数
- 定义函数
	>定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。
	<pre>def my_abs(x):
    if x >= 0:
        return x
    else:
        return -x</pre>
- 空函数
	>作用：ss语句什么都不做，那有什么用？实际上pass可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个pass，让代码能运行起来
	<pre>def nop():
    pass
	</pre>
- 参数检查
	>调用函数时，如果参数个数不对，Python解释器会自动检查出来，并抛出`TypeError`
	<pre>>>> my_abs(1, 2)
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	TypeError: my_abs() takes exactly 1 argument (2 given)</pre>
	而自定义函数需要自己设置检查参数类型，数据类型检查可以用内置函数`isinstance`
	<pre>def my_abs(x):
    if not isinstance(x, (int, float)):
        raise TypeError('bad operand type')
    if x >= 0:
        return x
    else:
        return -x</pre>
- 返回值
	>函数可以同时返回多个值，但其实就是一个tuple
- 函数的参数
	>默认参数可以简化函数的调用,注意事项：  
	>一是必选参数在前，默认参数在后，否则Python的解释器会报错（思考一下为什么默认参数不能放在必选参数前面）；  
	>二是如何设置默认参数。  
	>当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。
	>示例：
	><pre>def enroll(name, gender, age=6, city='Beijing'):
    print 'name:', name
    print 'gender:', gender
    print 'age:', age
    print 'city:', city
	></pre>
	>其中`age=6, city='Beijing`已被设置为默认参数，但**默认参数必须是不变对象**
	>默认参数是变量示例：
	><pre>def add_end(L=[]):
    L.append('END')
    return L
	></pre>
	>Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L也是一个变量，它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的[]了。  
	>上述例子改善：
	><pre>def add_end(L=None):
    if L is None:
        L = []
    L.append('END')
    return L
	结果：
	>>> add_end()
	['END']
	>>> add_end()
	['END']
	></pre>
- 设计不变对象的因素
	>为什么要设计str、None这样的不变对象呢？因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。
- 可变参数
	- 可变参数示例
		><pre>def calc(numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum
		</pre>
		>但是调用的时候，需要先组装出一个list或tuple，这样很不方便：
		><pre>>>> calc([1, 2, 3])
		14
		>>> calc((1, 3, 5, 7))
		84
		></pre>
	- 示例简化
		><pre>def calc(*numbers):
	    sum = 0
	    for n in numbers:
	        sum = sum + n * n
	    return sum
		</pre>
		>**定义可变参数和定义list或tuple参数相比，仅仅在参数前面加了一个*号。在函数内部，参数numbers接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数**
		>如果已经有一个list或者tuple,可以这样做:
		><pre>>>> nums = [1, 2, 3]
		>>>> calc(nums[0], nums[1], nums[2])
		></pre>
		>当然，也可以简化传参：
		><pre>>>> nums = [1, 2, 3]
		>>>> calc(*nums)
		></pre>
- 关键参数
	>关键字参数有什么用？它可以扩展函数的功能。比如，在person函数里，我们保证能接收到name和age这两个参数，但是，如果调用者愿意提供更多的参数，我们也能收到.  
	>和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：
	><pre>>>> kw = {'city': 'Beijing', 'job': 'Engineer'}
	>>>> person('Jack', 24, city=kw['city'], job=kw['job'])
	name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}
	简化写法：
	>>> kw = {'city': 'Beijing', 'job': 'Engineer'}
	>>> person('Jack', 24, **kw)
	name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}
	</pre>
- 参数组合  
参数定义的顺序必须是：必选参数、默认参数、可变参数和关键字参数
	<pre>def func(a, b, c=0, *args, **kw):
    print 'a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw
	>>> func(1, 2)
	a = 1 b = 2 c = 0 args = () kw = {}
	>>> func(1, 2, c=3)
	a = 1 b = 2 c = 3 args = () kw = {}
	>>> func(1, 2, 3, 'a', 'b')
	a = 1 b = 2 c = 3 args = ('a', 'b') kw = {}
	>>> func(1, 2, 3, 'a', 'b', x=99)
	a = 1 b = 2 c = 3 args = ('a', 'b') kw = {'x': 99}	
	</pre>
对于任意函数，都可以通过类似**`func(*args, **kw)`**的形式调用,无论它的参数是如何定义的。如：  
	<pre>>>> args = (1, 2, 3, 4)
	>>> kw = {'x': 99}
	>>> func(*args, **kw)
	a = 1 b = 2 c = 3 args = (4,) kw = {'x': 99}</pre>
###函数小结
- 默认参数一定要用不可变对象，如果是可变对象，运行会有逻辑错误
- `*args`是可变参数，args接收的是一个tuple
- `**kw`是关键字参数，kw接收的是一个dict
- 调用函数时如何传入可变参数和关键字参数的语法：
	- 可变参数既可以直接传入：`func(1, 2, 3)`，又可以先组装list或tuple，再通过`*args`传入：`func(*(1, 2, 3))`
	- 关键字参数既可以直接传入：`func(a=1, b=2)`，又可以先组装dict，再通过`**kw`传入：`func(**{'a': 1, 'b': 2})`