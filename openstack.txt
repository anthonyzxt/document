#openstack
###1. 简介
1. 它是IAAS层的实现。
2. 是一个云平台管理项目
3. 三大基础核心：计算 网络 存储
4. 目标是简化资源的管理和分配
###2. 环境准备
- 文档地址  
	[http://docs.openstack.org/newton/install-guide-rdo/environment-sql-database.html](http://docs.openstack.org/newton/install-guide-rdo/environment-sql-database.html)
- 基础服务
	- openstack环境安装
	- MySQL
		- openstack各个组件使用
		- 生成环境需要做集群
	- RabbitMQ
		- 分布式消息队列
		- 通信枢纽
		- 支持集群
	- 说明
		- 除了Horizon，openstack其它组件都要连接数据库（数据库需备份）
		- 除了Horizon和keystone，其它服务都需要连接RabbitMQ（要做高可用） 
- 增加需要的库并授权(安装参考官网文档)
	- keystone
	- glance
	- nova
	- nova_api（nova）
	- neutron
	<pre>create database neutron;
	grant all on neutron.* to 'neutron'@'localhost' identified by 'neutron';
	grant all on neutron.* to 'neutron'@'%' identified by 'neutron';</pre>

- Rabbit-MQ相关(安装授权参照官网文档)
	- 开启Rabbit-MQ web管理界面
		<pre>rabbitmq-plugins list
		rabbitmq-plugins enable rabbitmq_management</pre>
	- 访问网址：http://IP:15672 user and pwd = guest
	- 监控： http://IP:15672/api 做监控用
- Rabbit-MQ
	- 角色1：硬盘节点
		>把消息持久化在硬盘上，做高可用
	- 角色2：内存节点
		>相当于负责均衡
##shared services(共享服务)
###3. 验证服务keystone
- 作用
	- 认证管理
- 功能
	- 用户认证：用户权限与用户行为跟踪
		- 用户、项目、令牌、角色
	- 服务目录：提供一个服务目录，包括所有服务项与相关api的端点
		- service:服务
		- endpoint： 端点
- 配置
	<pre>grep '^[a-Z]' /etc/keystone/keystone.conf 
	[DEFAULT]
	admin_token = 684f42e5bc1debeabb70
	[database]
	connection = mysql+pymysql://keystone:keystone@10.0.0.160/keystone
	[memcache]
	servers = 10.0.0.160:11211
	[token]
	provider = fernet 
	driver = memcache </pre>
	- 同步数据库
		`su -s /bin/sh -c "keystone-manage db_sync" keystone`
	- 检查
		`mysql -h 10.0.0.160 -ukeystone -pkeystone -e "use keystone;show tables;"`
- 初始化fernet key证书
	`keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone`
- 启动memcached服务
	<pre>systemctl enable memcached.service
	systemctl start memcached.service
	cat /etc/sysconfig/memcached</pre>
- 配置apache
	1. 修改servername,要不然起不来
	2. `ln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/` 
	3. 启动服务
		<pre>systemctl enable httpd.service
		systemctl start httpd.service</pre>	
- 创建服务实体
	- 设置环境变量连接keystone
		<pre>export OS_TOKEN=684f42e5bc1debeabb70
		export OS_URL=http://10.0.0.160:35357/v3
		export OS_IDENTITY_API_VERSION=3</pre>
	- 添加域
		`openstack domain create --description "Default Domain" default`
	- 添加项目
		`openstack project create --domain default --description "Admin Project" admin`
	- 添加用户  
		` openstack user create --domain default --password-prompt admin`
	- 添加角色  
		`openstack role create admin`
	- 绑定用户到域的某个项目上，授予某个角色
		`openstack role add --project admin --user admin admin`  
- 创建一个新的project(Demo)、user(demo)、role(user)
	<pre>openstack project create --domain default   --description "Demo Project" demo
	openstack user create --domain default   --password-prompt demo
	openstack role create user
	openstack role add --project demo --user demo user
	</pre>
- 创建`service`项目，管理一下用户`glance nove neutron `授以admin角色
	<pre>openstack project create --domain default --description "Service Project" service
	openstack user create --domain default --password-prompt glance
	openstack role add --project service --user glance admin</pre>
####服务目录
- 创建服务注册
	<pre>openstack service create --name keystone --description "OpenStack Identity" identity 
	openstack endpoint create --region RegionOne   identity public http://10.0.0.160:5000/v3 
	openstack endpoint create --region RegionOne   identity internal http://10.0.0.160:5000/v3 
	openstack endpoint create --region RegionOne   identity admin http://10.0.0.160:35357/v3 </pre>
- 验证
	<pre>unset OS_TOKEN OS_URL
	openstack --os-auth-url http://10.0.0.160:35357/v3 \
		--os-project-domain-name default --os-user-domain-name  default --os-project-name admin --os-username admin  token issue</pre>
- 使用脚本验证
	- admin
		<pre># cat admin_openrc 
		export OS_PROJECT_DOMAIN_NAME=default
		export OS_USER_DOMAIN_NAME=default
		export OS_PROJECT_NAME=admin
		export OS_USERNAME=admin
		export OS_PASSWORD=admin
		export OS_AUTH_URL=http://10.0.0.160:35357/v3
		export OS_IDENTITY_API_VERSION=3
		export OS_IMAGE_API_VERSION=2
		openstack token issue</pre>
	- user-demo
		<pre># cat demo_openrc 
		export OS_PROJECT_DOMAIN_NAME=default
		export OS_USER_DOMAIN_NAME=default
		export OS_PROJECT_NAME=demo
		export OS_USERNAME=demo
		export OS_PASSWORD=demo
		export OS_AUTH_URL=http://10.0.0.160:5000/v3
		export OS_IDENTITY_API_VERSION=3
		export OS_IMAGE_API_VERSION=2</pre>
###4. 镜像服务Glance
- 作用
	- 提供虚拟镜像的注册和存储管理
- 两个服务
	- API(port:9292)
		- 接受云系统镜像的创建、删除、读取请求
	- Registry (port:9191)
		- 云系统的镜像注册服务
- 安装
	`yum install -y openstack-glance` 
- 配置glance-api
	<pre>vi /etc/glance/glance-api.conf
	[database]
	connection = mysql+pymysql://glance:glance@10.0.0.160/glance</pre>
- 配置glance-Registry
	<pre>vi /etc/glance/glance-registry.conf
	[database]
	connection = mysql+pymysql://glance:glance@10.0.0.160/glance</pre>
- 同步数据库
	<pre>su -s /bin/sh -c "glance-manage db_sync" glance</pre>
- 配置认证服务访问glance-api和glance-Registry
	<pre>vi /etc/glance/glance-api.conf
	[keystone_authtoken]
	auth_uri = http://10.0.0.160:5000
	auth_url = http://10.0.0.160:35357
	memcached_servers = 10.0.0.160:11211
	auth_type = password
	project_domain_name = default
	user_domain_name = default
	project_name = service
	username = glance
	password = glance
	
	[paste_deploy]
	flavor = keystone
	
	vi /etc/glance/glance-registry.conf
	auth_uri = http://10.0.0.160:5000
	auth_url = http://10.0.0.160:35357
	memcached_servers = 10.0.0.160:11211
	auth_type = password
	project_domain_name = default
	user_domain_name = default
	project_name = service
	username = glance
	password = glance

	[paste_deploy]
	flavor = keystone	
	</pre>
	
- 配置镜像存储位置
	<pre>vi /etc/glance/glance-api.conf
	[glance_store]
	stores = file,http
	default_store = file
	filesystem_store_datadir = /var/lib/glance/images/</pre>
- 配置开机启动
	<pre>systemctl enable openstack-glance-api.service openstack-glance-registry.service
	systemctl start openstack-glance-api.service openstack-glance-registry.service</pre>
- 在keystone上注册glance服务
	<pre>openstack service create --name glance 	--description "OpenStack Image" image
	openstack endpoint create --region RegionOne image public http://10.0.0.160:9292
	openstack endpoint create --region RegionOne image internal http://10.0.0.160:9292
	openstack endpoint create --region RegionOne image admin http://10.0.0.160:9292</pre>
- 上传镜像验证
	<pre>openstack image create "cirros" --file cirros-0.3.4-x86_64-disk.img --disk-format qcow2 --container-format bare --public
	openstack image list</pre>
<pre></pre>
### 监控服务ceilometer
- 作用
	- 提供监控和数据采集、计量服务

###5. 计算服务Nove
- 作用
	- 通过虚拟化技术提供计算资源池
- 服务介绍
	- API
		>负责接收和响应外部请求。支持openstack API,EC2 API。外部访问nova的唯一途径。
	- Cert
		>负责身份认证EC2，为了兼容AWS，可以不启动
	- Scheduler
		>用于云主机调度，它的作用是决策虚拟机创建在哪个主机（节点）上
		>计算步骤2步：1.过滤(fliter) 2.计算权值(Weight)
	- Conductor
		>计算节点访问数据的中间件
	- Consoleauth
		>用于控制台的授权验证
	- Novncproxy
		>VNC代理
####服务配置管理部分
- 1.配置数据库
	<pre>vi /etc/nova/nova.conf
	[api_database]
	
	connection = mysql+pymysql://nova:nova@10.0.0.160/nova_api
	
	[database]
	
	connection = mysql+pymysql://nova:nova@10.0.0.160/nova</pre>
	- 同步数据
	<pre>su -s /bin/sh -c "nova-manage api_db sync" nova
	su -s /bin/sh -c "nova-manage db sync" nova
	mysql -h 10.0.0.160 -unova -pnova -e "use nova_api;show tables" 
	mysql -h 10.0.0.160 -unova -pnova -e "use nova;show tables"</pre>
- 2.keystone令牌配置
	<pre># vi /etc/nova/nova.conf
	[keystone_authtoken]
	auth_uri = http://10.0.0.160:5000
	auth_url = http://10.0.0.160:35357
	memcached_servers = 10.0.0.160:11211
	auth_type = password
	project_domain_name = default
	user_domain_name = default
	project_name = service
	username = nova
	password = nova

	[DEFAULT]

	auth_strategy = keystone</pre>
- 3.rabbitmq配置
	<pre># vi /etc/nova/nova.conf
	rpc_backend=rabbit
	rabbit_host=10.0.0.160
	rabbit_port=5672
	rabbit_userid=openstack
	rabbit_password=openstack</pre>
- 4.nova服务配置
	- 在``[DEFAULT]``部分，只启用计算和元数据API
		<pre>[DEFAULT]
		enabled_apis = osapi_compute,metadata</pre>
	- 启用网络服务支持和使用neutron防火墙
		<pre>[DEFAULT]

		use_neutron = True
		firewall_driver = nova.virt.firewall.NoopFirewallDriver</pre>	
- 5.配置vncproxy
	<pre># vi /etc/nova/nova.conf
	[vnc]
	vncserver_listen=10.0.0.160
	vncserver_proxyclient_address =10.0.0.160</pre>
- 6.配置glance
	<pre># vi /etc/nova/nova.conf
	[glance]
	api_servers = http://controller:9292</pre>
- 7.配置锁路径
	<pre># vi /etc/nova/nova.conf
	[oslo_concurrency]
	lock_path = /var/lib/nova/tmp</pre>
- 启动服务
	<pre># systemctl enable openstack-nova-api.service openstack-nova-consoleauth.service openstack-nova-scheduler.service openstack-nova-conductor.service openstack-nova-novncproxy.service
	# systemctl start openstack-nova-api.service openstack-nova-consoleauth.service openstack-nova-scheduler.service openstack-nova-conductor.service openstack-nova-novncproxy.service</pre>
####服务注册
	<pre>. admin_openrc
	openstack service create --name nova --description "OpenStack Compute" compute
	openstack endpoint create --region RegionOne compute public http://10.0.0.160:8774/v2.1/%\(tenant_id\)s
	openstack endpoint create --region RegionOne compute admin http://10.0.0.160:8774/v2.1/%\(tenant_id\)s 
	openstack endpoint create --region RegionOne compute internal http://10.0.0.160:8774/v2.1/%\(tenant_id\)s 
	</pre>

###6. 网络服务Neutron
- 作用
	- 实现虚拟机的网络资源管理
###7. 创建第一台openstack云主机
###8. 管理服务horizon
- 作用
	- 基于openstack api接口使用django开发的web管理

###存储swift cinder
##高层服务 higher-level services
###heat
- 作用
	- 自动化部署组件
###Trove
- 作用
	- 提供数据库应用服务 