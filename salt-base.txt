#saltstack#

----------

##简介及安装
- 三大功能
	- 远程执行
	- 配置管理(状态，不可回滚)
	- 云管理
- 官网
	- 用户组 [http://www.saltstack.cn/](http://www.saltstack.cn/)
	- 正式官网 [http://www.saltstack.com/](http://www.saltstack.com/)  
- 四种运行方式
	- Local
	- Minion / Master
	- syndic(代理模式)
	- salt ssh
- 官方仓库
	- [http://repo.saltstack.com/](http://repo.saltstack.com/)
- 安装
	- yum安装repo仓
	<pre>yum install https://repo.saltstack.com/yum/redhat/salt-repo-latest-1.el7.noarch.rpm -y</pre>
	- salt-master的安装
	<pre>yum install salt-master -y</pre>
	- 客户端安装
	<pre>yum install salt-minion -y</pre>
	- 其他
	<pre>yum install salt-ssh -y
	yum install salt-syndic -y
	yum install salt-cloud -y
	yum install salt-api -y
	</pre>
- salt-master服务配置
	- salt-master服务启动
	`systemctl start salt-master.service`
- salt-minion配置
	- 配置文件 `vi /etc/salt/minion`
	- 修改内容
	<pre>1. #master salt 修改为master masterIP(推荐在主机名可解析的情况下用hostname)
	2. #id: 修改为id： 自定义为IP#添加minion的唯一标识符，变动频繁用IP，比较固定用hostname
	3. systemctl start salt-minion.service</pre>
##远程执行##
- 认证
	- 1. salt-minion启动后，在`/etc/salt/pki/minion`目录下产生公钥和私钥文件:`minion.pem` 和 `minion.pub`
	- 2. 在salt-master的 `/etc/salt/minions_pre`会接收minion端主机的私钥文件： `linux-node2` ，暂时存放这里
	- 3. 在salt-master执行 `salt-key -a linux*`认证后， `/etc/salt/minions_pre`下的私钥文件 `linux-node2`会被保存到`/etc/salt/minions`下;同时salt-minion端的`/etc/salt/pki/minion`会保存salt-master的公钥文件：`minion_master.pub`。至此，认证完成。  
- salt命令
	- salt '*' test.ping
	- salt '*' cmd.run 'Commd'
	- salt '*' state.sls 

##配置管理##
- state模块说明
	- 是以YAML语法编写、后缀名为`.sls`的文件
- YAML基础：三个规则
	- 规则1
		>缩进：2个空格，不能使用`tab`
	- 规则2
		>冒号：  
			a. 和空格配合表示层级关系  
			b. 表示键/值对，eg: `my_key: my_value`
	
	- 规则3
		>\- ：列表。eg：
			<pre>- list_value_one
			- list_value_two
			- list_value_three</pre>
- salt-master配置文件示例
	- 修改文件保存位置
<pre>file_roots:
  base:
    - /srv/salt/
  dev:
    - /srv/salt/dev/services
    - /srv/salt/dev/states
  prod:
    - /srv/salt/prod/services
    - /srv/salt/prod/states
</pre>
>说明:base名字是不能修改的，dev和prod的名字随便改

- 示例：安装apache
	- 文本
	<pre># cat /srv/salt/web/apace.sls 
	apache-install:
	  pkg.installed:
	    - names:
	      - httpd
	      - httpd-devel
	
	apache-service:
	  service.running:
	    - name: httpd
	    - enable: True</pre>
 
	- 执行安装
	`salt 'linux-node2' state.sls web.apace`
	>在salt-master执行上述命令后，apace.sls文件会被发送到minion的`/var/cache/salt/minion/files/base/web/apace.sls`下被minion执行。
- stat.highstat高级state设置示例
	>默认保存在base根环境下  

	- 脚本
	<pre>vi top.sls
	base:
	  'linux-node2':
	    - web.apace
	  'manage':
	    - web.apace
	</pre>
	- 执行命令  
	`salt 'linux-node2' state.highstate test=True` # 先检测正确性，正确的情况下再执行,目标不要带`*`  
	`salt 'linux-node2' state.highstate `  
	**top file的作用是给指定的目标给特定的状态**。
##ZeroMQ与saltstack##
- ZeroMQ用到的2种模式
	- 发布与订阅模式（pub and sub）。salt-master的4505端口用于发送信息。
	- 请求和响应模式。salt-master的4506端口用于接收minion端消息
		
		>查看salt进程名： `yum install  -y python-setproctitle`
##saltstack数据系统##
两种数据系统
	- Grains （谷粒）
	- Pillar	 （柱子）
###Grains###
它是一种静态数据，是minion在启动的时候收集的minion本地的相关信息。如操作系统版本，内核版本等。  

- 作用  
	1.  资产管理，信息查询
	2.  用于目标选择
		<pre>salt -G 'os:Centos' test.ping</pre>
		 # 使用大G做目标选择
	3.  配置管理中使用
		<pre>salt 'cobbler' grains.ls
		salt 'linux-node2.oldboy.com' grains.items
		salt 'linux-node2.oldboy.com' grains.item fqdn_ip4
		salt 'linux-node2.oldboy.com' grains.item os</pre>
- 自定义
	1. 在minion里边自定义grains
		<pre>grains:
		  roles: testname</pre>
	 重启minion服务后测试:
		<pre>salt 'linux-node2.oldboy.com' grains.item roles    
		linux-node2.oldboy.com:
    	    ----------
    	roles:
            apache</pre>
	示例：执行echo命令
		<pre>salt -G 'roles:apache' cmd.run 'echo hehe' 
		linux-node2.oldboy.com:
    	    hehe</pre>
\# 生产中建议将grains配置写在 `/etc/salt/grains`文件中，写入以K/V格式,如 `testroles: testv`
- salt刷新grains命令  
	`salt '*' saltutil.sync_grains`
- grains在top文件使用示例：
	<pre>base:
	  'linux-node2':
	    - web.apace
	  'roles: apace'
	    - match: grain
	    - web.apace</pre>

- 配置管理案例
- grains开发使用示例
	- 创建grains目录和测试文件
	<pre>mkdir /srv/salt/_grains
	vi my_grains.py
	#!/usr/bin/env python
	#_*_ coding: utf-8 _*_

	def my_grains():
    #初始化一个grains字典
    grains = {}
    #设置值
    grains['iaas'] = 'openstack'
    grains['edu'] = 'oldboyedy'
    #返回这个字典
    return grains
	</pre>
	- 同步测试文件
	<pre>salt '*' saltutil.sync_grains 
	linux-node2:
	    - grains.my_grains
	manage:
	    - grains.my_grains</pre>
	
	文件会被保存在minion端的`/var/cache/salt/minion/files/base/_grains`目录下，而`/var/cache/salt/minion/extmods/grains/`目录下的文件是用来被执行
	- 结果
	<pre>salt '*' grains.item iaas
	linux-node2:
	    ----------
	    iaas:
	        openstack
	manage:
	    ----------
	    iaas:
	        openstack</pre>   
- grains的运行优先级
	1. 系统自带
	2. grains文件写的
	3. minion配置文件写的
	4. 自己写的
###pillar###

- 简述  
	**pillar数据是动态的，给特定的minionz指定特定的数据。只有指定的minion自己能看到自己的数据**

- 应用场景  
	用在比较对数据敏感的场合，如密码  

- pillar查看  
	`salt '*' pillar.items`

- pillar的master配置  
	`#pillar_opts: False`找到这行，去掉注释并修改值为`True`

- 自定义pillar
	<pre>vi /etc/salt/master
		#pillar_roots:
	#  base:
	#    - /srv/pillar</pre>
	去掉注释，创建base相关目录，重启`salt-master`即可
- pillar实践
	1. 建立pillar测试文件
		<pre>cat /srv/pillar/apache.sls 
		{% if grains['os'] == 'Centos' %}
		apache: httpd
		{% elif grains['os'] == 'Debian' %}
		apache: apache2
		{% endif %}</pre>

	2. top file中给特定的minion指定特定的数据
		<pre>vim /srv/pillar/top.sls
		base:
		  'linux-node2':
		    - web.apace</pre>
	3. pillar刷新命令  
		`salt '*' saltutil.refresh_pillar`

	4. 查看  
	 `salt '*' pillar.items apache`
- 使用场景
	- 目标选择
##pillar和grains的区别##

名称 | 类型 | 数据采集方式 | 应用场景 |定义位置
-----|------|------------|--------|-----
grains| 静态 |minion启动时候收集 |数据查询 目标选择 配置管理|minion
pillar| 动态 |master自定义      |目标选择 配置管理 敏感数据|master

##深入学习saltstack远程执行##
- 命令讲解  
	`salt '*' cmd.run 'w'`
	>命令：salt  
	>目标： '*'  
	>模块： cmd.run  
	>返回：执行后结果的返回，Returnners

###目标targeting###
---
**所有匹配目标的方式，都可以用到top file里边来指定目标**  

1. 和minion有关
	1. minion ID  如： 'linux-node1'
	2. 通配符   如：linux-node[1|2]'
		>列表方式： salt -L __'linux-node1,linux-node2'__ test.ping
		>正则方式： salt -E __linux-(node1|node2)__ test.ping
2. 和minion无关
	>子网、IP地址
	<pre># salt -S 10.0.0.171 test.ping 
	linux-node2.oldboy.com:
	    True
	# salt -S 10.0.0.0/24 test.ping   
	linux-node2.oldboy.com:
	    True
	cobbler:
	    True</pre>
	
##主机名设置方案##
1. IP地址
2. 根据业务来设置
	>redis-node1-redis04-idc04-soa.example.com  
	>redis-node1为第一个节点  
	>redis04为第4个集群  
	>idc04为哪个机房  
	>soa为业务线
##指定目标匹配总结##
[https://www.unixhot.com/docs/saltstack/topics/targeting/compound.html](https://www.unixhot.com/docs/saltstack/topics/targeting/compound.html)
##执行模块##

- 模块地址链接  
[https://www.unixhot.com/docs/saltstack/ref/index.html](https://www.unixhot.com/docs/saltstack/ref/index.html)
- 常用几个模块  
	 + network
	 + service
		 + available
		 + status
		 + reload  
	 - cp 
	 	>salt-cp '*' /etc/hosts /tmp/hehe
	 - state
		>state.show_top
##返回程序##
- 返回相关模块  
[https://www.unixhot.com/docs/saltstack/ref/returners/index.html](https://www.unixhot.com/docs/saltstack/ref/returners/index.html)
- 执行单独安装某个任务
	`salt '*' state.single pkg.installed name=MySQL-python`
- 以mysql为实例
	- 建立salt库及相关表
	<pre>CREATE DATABASE  `salt`
	  DEFAULT CHARACTER SET utf8
	  DEFAULT COLLATE utf8_general_ci;
	
	USE `salt`;
	
	--
	-- Table structure for table `jids`
	--
	
	DROP TABLE IF EXISTS `jids`;
	CREATE TABLE `jids` (
	  `jid` varchar(255) NOT NULL,
	  `load` mediumtext NOT NULL,
	  UNIQUE KEY `jid` (`jid`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	CREATE INDEX jid ON jids(jid) USING BTREE;
	
	--
	-- Table structure for table `salt_returns`
	--
	
	DROP TABLE IF EXISTS `salt_returns`;
	CREATE TABLE `salt_returns` (
	  `fun` varchar(50) NOT NULL,
	  `jid` varchar(255) NOT NULL,
	  `return` mediumtext NOT NULL,
	  `id` varchar(255) NOT NULL,
	  `success` varchar(10) NOT NULL,
	  `full_ret` mediumtext NOT NULL,
	  `alter_time` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	  KEY `id` (`id`),
	  KEY `jid` (`jid`),
	  KEY `fun` (`fun`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	
	--
	-- Table structure for table `salt_events`
	--
	
	DROP TABLE IF EXISTS `salt_events`;
	CREATE TABLE `salt_events` (
	`id` BIGINT NOT NULL AUTO_INCREMENT,
	`tag` varchar(255) NOT NULL,
	`data` mediumtext NOT NULL,
	`alter_time` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	`master_id` varchar(255) NOT NULL,
	PRIMARY KEY (`id`),
	KEY `tag` (`tag`)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	------
	grant all on salt.* to salt@localhost identified by 'salt';	
	</pre>
- 执行模块  
	`salt '*' test.ping --return mysql`
##编写状态模块##
1. 文件保存目录位置  
	`/srv/salt/_modules`
2. 文件命名
	文件名就是模块名。如：my_disk.py
	<pre>vi my_disk.py
	def list():
	  cmd = 'df -h'
	  ret = __salt__['cmd.run'](cmd)
	  return ret</pre>
3. 刷新执行
	<pre>salt '*' saltutil.sync_modules
	salt '*' my_disk.list</pre>