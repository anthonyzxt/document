#Git常用命令整理#
##建立仓库及提交文件到仓库
- 初始化或建立仓库  
   	`git init`
- 添加文件到仓库  
	1. 添加到仓库  
		 `git add filename`  
	2. 提交到仓库  
		`git commit -m "说明信息"`  

- 查看结果  
	<pre>$ git status        
On branch master
nothing to commit, working directory clean
</pre>
- 查看具体修改内容
	<pre>$ git diff New\ Document.txt
diff --git a/New Document.txt b/New Document.txt
index 32093a4..8ea12b1 100644
--- a/New Document.txt
+++ b/New Document.txt
@@ -1,3 +1,4 @@
+#test#
 ## Welcome to MarkdownPad 2 ##
**MarkdownPad** is a full-featured Markdown editor for Windows.
zhou@DESKTOP-IP23IHA MINGW64 /f/2016 linux/document (master)  
</pre>
##文件历史回滚##
- 先查看每次修改了什么内容
	<pre>$ git log
commit ea727c78faa6dc6c4f6c560a9348347b092980b8
Author: anthonyzxt <zxt208@foxmail.com>
Date:   Sat Aug 27 14:08:11 2016 +0800
            testfile
commit 7d17ce12761d262d200b1b326f04acf05f259193
Author: anthonyzxt <zxt208@foxmail.com>
Date:   Sat Aug 27 13:33:30 2016 +0800
            write a installfile
</pre>
- 回滚命令  
	`git reset -hard head^`  
	说明：`head`为当前版本号，`head^`为上一个版本号，`head^^`为上上个版本号，如果很多，可以用`head~20`这样来表示
- 回退之后回退到新版文件
	1. 查看要回退的文件ID  
		`git reflog`  
	2. 执行回滚命令
		`git reset -hard "查找到的ID"`
##工作区和缓冲区##
- 工作区  
	建立仓库时指定的目录
- 版本库  
	工作区下的隐藏目录：`.git`,其中最重要的就是称为`stage`（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支`master`，以及指向`master`的一个指针叫`HEAD`
- git工作流程  
  ![git](http://www.liaoxuefeng.com/files/attachments/001384907720458e56751df1c474485b697575073c40ae9000/0)
##管理修改##
- 查看工作区和版本库里面最新版本的区别  
	`git diff HEAD -- filename`
- 撤销修改
	1.撤销工作区的修改  
		`git checkout -- file`  
	其中`--`不能少，没有`--`，就变成了“切换到另一个分支”的命令
- 撤销的两种情况
	1. 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	2. 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。  
    实例：一个readme文件修改错了，但已经git到暂存区了。但在commit之前发现了这个问题。
	执行git status看到已经到了暂存区了。  
		<pre>$ git status
		# On branch master
		# Changes to be committed:
		#   (use "git reset HEAD <file>..." to unstage)
		#
		#       modified:   readme.txt
		#
       </pre>
	以上信息中，git提示我们`git reset HEAD file`可以把暂存区的修改撤销掉（unstage），重新放回工作区：  
	    <pre>$ git reset HEAD readme.txt
	Unstaged changes after reset:
	M       readme.txt
    	</pre>		
	git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。再用git status查看一下，现在暂存区是干净的，工作区有修改：
		<pre>$ git status
		# On branch master		
		# Changes not staged for commit:
		#   (use "git add <file>..." to update what will be committed)
		#   (use "git checkout -- <file>..." to discard changes in working directory)
		#
		#       modified:   readme.txt
		#
	no changes added to commit (use "git add" and/or "git commit -a")</pre>
最后撤销工作区的修改即可：
		<pre>$ git checkout -- readme.txt
		$ git status
		# On branch master
		nothing to commit (working directory clean)
		</pre>


##删除文件##
当工作区和版本库不一致的时候，`git status`就会告诉我们如何操作，其中一条就是`git rm`
	<pre>$ git status
	# On branch master
	# Changes not staged for commit:
	#   (use "git add/rm <file>..." to update what will be committed)
	#   (use "git checkout -- <file>..." to discard changes in working directory)
	#
	#       deleted:    test.txt
	#
	no changes added to commit (use "git add" and/or "git commit -a")	</pre>
删除的2个选择：  
1. 确实要从版本库中删除，执行以下2个命令：
	<pre>git rm file
git commit -m "shuoming"</pre>
于是文件便从版本库删除了。  
2. 是删除错文件了，从版本库恢复到工作区  
	`$ git checkout -- test.txt`
##远程仓库##
- 添加远程仓库  
	1. 首先在服务github上添加ssh的公钥。
	`git remote add origin git@github.com:anthonyzxt/document.git`  
远程库的名字就是origin，这是Git默认的叫法，也可以改成别的
	2. 把本地库的所有内容推送到远程库上  
	`git push -u origin master`  
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令  
	3. 从现在起，只要本地作了提交，就可以通过命令  
	`git push origin master`
把本地master分支的最新修改推送至GitHub
- 从远程库clone到本地库
	`$ git clone git@github.com:anthonyzxt/document.git`
- 从远程更新到本地  
	`git pull origin master`
##分支管理##