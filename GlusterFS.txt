##GlusterFS
- 什么是GlusterFS
	>分布式存储系统
- 实验要求
	- 电脑一台
	- 4台虚拟机
	- 最小安装
	- 关闭iptables和防火墙
	- 预装glusterfs软件包
		<pre>yum install -y centos-release-gluster37.noarch
		yum --enablerepo=centos-gluster*-test install glusterfs-server gluster-cli glusterfs-geo-replication -y</pre>
###基础理论知识
- 分布式系统的出现
	>有效的解决了数据的存数和管理难题，将固定于某个地点的某个文件系统，扩展到多个地点/多个文件系统，众多的节点组成一个文件系统网络。
- 概述
	>GlusterFS是scale-out存储解决方案的核心，是一个开源的分布式文件系统，具有强大的横向扩展能力，通过扩展能够支持PB存储容量和处理数千客户端。它是结果TCP/IP或InfiniBand RDMA网络将物理分布的存储资源聚集在一起，使用单一全局命名来管理数据
- 应用场景
	- media
		- 文档、图片、音频、视频
	- shared storage
		- 云存储、虚拟化存储、HPC
	- Big data
		- 日志文件、RFID数据

###安装及配置
- 准备工作
	- 修改主机名
		- /etc/syconfig/network
		- /etc/hosts
	- 测试虚拟机名称规划
		- 10.0.0.200 mystorage1
		- 10.0.0.201 mystorage2
		- 10.0.0.202 mystorage3
		- 10.0.0.203 mystorage4
	- 每台虚拟机上添加hosts文件以便解析
- 配置工作
	- 版本查看
		<pre># glusterfs -V
		glusterfs 3.7.15 built on Aug 30 2016 15:33:03</pre>
	- 服务管理
		<pre>service glusterd start
		service glusterd stop
		chkconfig glusterd on</pre>
	- 存储主机加入信任存储池
		<pre>gluster peer probe mystorage02
		查看状态
		gluster peer status</pre>
	- 安装XFS支持包  
		`yum install -y xfsprogs`
	- 格式化测试磁盘为XFS格式  
		`mkfs.xfs -f /dev/sdb`
	- 挂着磁盘
		<pre>mkdir -p /storage/brick1
		mount /dev/sdb /storage/brick1</pre>
	- 设置开机挂载
		- `vi`添加到`/etc/fstab`文件理
			<pre>vi /etc/fastab
			/dev/sdb	/storage/brick1 xfs defaults 0 0
			/dev/sdc	/storage/brick2 xfs defaults 0 0</pre>
		- `echo`到`/etc/fstab`
			<pre>echo "/dev/sdb /storage/brick1 xfs defaults 0 0">>/etc/fstab
			mount -a</pre>
	- 创建volume及其他操作
		- distributed,分布式卷，文件通过hash算法随机的分布到由bircks组成的卷上
		- replicated:复制式卷，类似raid1,replica数必须等于volume中brick所包含的存储服务器数，可用性高
		- striped：条带式卷，类似raid0，stripe数必须等于volume中brick所包含的存储服务器数，文件被分成数块，以Round Robin的方式存储在bricks中，并发粒度是数据块，大文件性能好
		- distributed striped：volume中brick所包含的存储服务器数必须是stripe的倍数（>=2倍），兼顾两者的功能
		- distributed replicated：分布式的复制卷，volume中brick所包含的存储服务器数量必须是repilca的倍数（>=2倍），兼顾两者的功能
		- 创建分布卷命令
			`gluster volume create gv1 mystorage01:/storage/brick1 mystorage02:/storage/brick1 force`
			>`gv1`：自定义卷名
			>`mystorage01:/storage/brick1`为被加入卷的主机分区路径，这个命令是将所有主机的用作分布式文件系统的分区整合在一起
		- 启动卷分区  
			`gluster volume start gv1`
		- 查看卷轴信息  
			`gluster volume info`
		- 挂载到目录  
			`mount -t glusterfs 127.0.0.1:/gv1 /mnt`
		- NFS格式的挂着方式  
			`mount -o mountproto=tcp -t nfs 10.0.0.201:gv1 /mnt`
	- 创建分布式复制卷
		<pre>gluster volume create gv2 replica 2 mystorage03:/storage/brick1 mystorage04:/storage/brick1 force
		gluster volume start</pre>
	- 创建分布式条带卷
		- 新增1块测试硬盘，格式化  
	`mkfs.xfs -f /dev/sdc`
		- 设置开机自动挂载
			<pre>echo "/dev/sdc /storage/brick2 xfs defaults 0 0">>/etc/fstab
		mount -a</pre>
		- 创建命令
			<pre>gluster volume create gv3 stripe 2 mystorage03:/storage/brick2 mystorage04:/storage/brick2</pre>
			>`stripe 2`为文件被打散的份数，这里被打散为2份
		- 挂载分布式卷
			<pre>mkdir /gv{1..3}
			mount -t glusterfs 127.0.0.1:gv1 /gv1	
			mount -t glusterfs 127.0.0.1:gv2 /gv2
			mount -t glusterfs 127.0.0.1:gv3 /gv3</pre>
		-测试
			<pre>cd /gv3
			dd if=/dev/zero of=/gv3/10m.file bs=1024 count=10000
			dd if=/dev/zero of=/gv3/20m.file bs=1024 count=20000</pre>
		- 观察结果
			<pre>[root@mystorage03 ~]# ll /storage/brick2 -h
			total 15M
			-rw-r--r-- 2 root root 4.9M Oct 12 11:08 10m.file
			-rw-r--r-- 2 root root 9.8M Oct 12 11:09 20m.file

			[root@mystorage04 ~]# ll -h /storage/brick2
			total 15M
			-rw-r--r-- 2 root root 4.9M Oct 12 11:09 10m.file
			-rw-r--r-- 2 root root 9.8M Oct 12 11:09 20m.file</pre>
	- 增加磁盘到指定的卷 ：扩容
		<pre>gluster volume stop gv2
		gluster volume add-brick gv2 replica 2 mystorage01:/storage/brick2 mystorage02:/storage/brick2 force
		gluster volume start gv2
		umount /gv2
		mount -t glusterfs 127.0.0.1:gv2 /gv2</pre>
		>新增的磁盘里边是没有数据的，需要重新做磁盘数据平衡
	- 磁盘数据平衡
		<pre>gluster volume rebalance gv2 start
		gluster volume rebalance gv2 status</pre>
		>这个是实际生产中很少用到，如果需要的话，直接增加一个volume即可。
	- 移除brick volume
		>这个是实际生产中很少用到，了解即可。另brick移除的时候也是成对的移除
		<pre>移除brick：
		gluster volume remove-brick gv2 replica 2 mystorage01:/storage/brick2 mystorage02:/storage/brick2 force
		移除volume：
		gluster volume delete gv2</pre>
###构建生产分布式存储
1. 硬件要求
	1. 一般选2U机型，磁盘SATA 4T，如I/O要求高，可以采购SSD硬盘
	2. 建议做raid10，出于空间的考虑的话，可以做raid5，最好有热备盘1-2个
	3. 服务器多的话，配置做好一样
2. 系统要求和分区划分
	1. 最好安装64的系统
3. 网络环境
	1. 建议全部千兆环境，gluster服务最好有2块网卡，1块网卡绑定供gluster使用，剩下一块给管理网络IP,网卡最好是万兆
4. 服务器摆放
	1. 建议分柜摆放
	2. 服务器间磁盘做配对
5. 构建高性能、高可用存储
	1. 建议采用分布式存储，因为数据有备份，相对安全
	2. 条带式有一定的数据风险
	3. 开启防火墙端口，在有开防火墙的情况下：
		<pre>iptables -I INPUT -p tcp --dport 24007:24011 -j ACCEPT
		iptables -I INPUT -p tcp --dport 38465:38485 -j ACCEPT</pre>
6. 优化参数
	1. Auth.allow：IP访问授权 默认值：* 合法值：IP地址
	2. Cluster.min-free-disk：剩余磁盘空间阀值 默认值：20% 合法值：百分比
	3. Cluster.strip-block：条带大小  默认值：128KB 合法值：字节
	4. network.frame-timeout：请求等待时间 默认值：1800s  合法值：0-1800
	5. network.ping-timeout:客户等待时间 默认值：42s 合法值：0-42
	6. Nfs.disabled:关闭nfs服务	默认值：off 合法值：off|on
	7. Performance.io-thread-count:IO线程数 默认值：16 合法值：0-65
	8. Performance.cache-refresh-timeout:缓存校验周期 默认值：1s 合法值：0-61
	9. 	Performance.cache-size:读缓存大小 默认值：32MB 合法值：字节
	10. Performance.quick-read：优化读取小文件的性能
	11. Performance.read-ahead:用预读取的方式提高读取的性能，有利于频繁访问的文件
	12. Performance.write-behind:在读写数据时，先写入缓存，再写人硬盘，以提高写入的性能。谨慎调整，以免虚拟机挂掉或其他应用出现readonly情况
	13. Performance.io-cache：缓存已经被读过
	>这些参数一般是结合使用，比如IO-cache read-ahead io-thread-count cache-refresh-timeout
7. 调整方法
	<pre>gluster volume set <卷><参数>
	gluster volume set gv2 performance.read-ahead on
	gluster volume set gv2 performance.cache-size 256MB</pre>
8. 监控
	>主要是zabbix监控。
	1. 监控节点在不在线(以下基于分布式复制)
		`gluster volume status nfsp`
	2. 启动完全修复
		`gluster volume heal gv2 full`
	3. 查看需要修复的文件
		`gluster volume heal gv2 info`
	4. 查看修复成功的文件
		`gluster volume heal gv2 info healed`
	5. 查看修复失败的文件
		`gluster volume heal gv2 info heal-failed`
	6. 查看脑裂情况
		`gluster volume heal gv2 info split-brain`
9. 磁盘配额，针对目录
	<pre>gluster volume quota gv2 enable --激活配额功能
	gluster volume quota gv2 disable --关闭配额功能
	gluster volume quota gv2 limit-usage /data 10GB --/gv2/data目录限制
	gluster volume quota gv2 list --quota列表
	gluster volume quota gv2 list /data --限制目录的quota信息
	gluster volume quota gv2 features.quota-timeout 5 --设置信息的超时时间
	gluster volume quota gv2 remove /data --删除某个目录的quota设置</pre>
###生产中常见故障处理