#docker
- 三大理念 
	- 构建(build)
	- 运输(ship)
	- 运行(run)
- 结构
	- CS架构 
- 三个组件
	- 镜像
	- 容器
		>容器从镜像创建的叫实例，之间是互相隔离，但不是很彻底
	- 仓库 
- 与kvm的区别
	![](http://s1.51cto.com/wyfs02/M01/4C/28/wKioL1Q3c0LwucCMAAB3V63IeQw310.jpg) 
- 什么是docker
	- docker是docker公司开源的一个基于LXC技术之上构建的Container容器引擎，源代码托管在GitHub上，基于Go语言并遵从Apache2.0协议开源。
	- 是通过内核虚拟机技术(namespaces及cgroups等)来提供容器的资源隔离与安全保障等。通过操作系统层的虚拟化实现隔离，所以在运行时，不需要类似虚拟机额外的操作系统开销，提高资源利用率
###1. Docker镜像管理
- 搜索镜像： `docker search`
- 获取镜像： `docker pull`
- 查看镜像： `docker images`
- 删除镜像： `docker rmi IMAGE ID`
- 删除容器： `docker rm mydocker`
- 启动命令： `docker run -n name -h hostname`
- 停止容器： `docker stop Container ID`
- 查看容器： `docker ps -a -l`
- 进入容器： `docker exec|docker attach|nsenter`
- 查看端口： `docker port container ID|name`
- 杀死正在运行的容器： `docker kill ID(docker kill $(docker ps -a -q))`


####导入镜像文件和导出
- 导入： `docker load --input centos.tar`
- 导出： `docker save -o centos.tar centos`
- 启动命令(相当于创建一个容器)：
	- `docker run [-args(必须在镜像名称前边)] centos [command(可选，可有可无)]`
	- `docker run centos /bin/echo "hello world"`
	- `docker run --rm centos /bin/echo "hello world"`#执行完后删除容器
	- 内容解释
		<pre># docker ps -a
	CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES
	15ad134555b0        centos              "/bin/echo 'hello wor"   49 seconds ago      Exited (0) 47 seconds ago                       dreamy_lamarr</pre>
		- ID :系统产生
		- name字段名称：dreamy_lamarr(系统产生，可自己指定)
		- 以上两者用于docker管理
- 查看docker进程
	- `docker ps -a` 
- 实例1  
	`docker run --name mydocker -t -i centos /bin/bash` 
	- 说明：新增一个名为mydocker的以centos镜像为基础的容器，同时打开tty接口和开启input功能，执行的命令为/bin/bash
	- 使用完再次使用的命令：  
		`docker start mydocker`
	- 进入容器：  
		`docker attack mydocker` ：这个命令执行后会退出容器，生产不用。 
- 涉及到不可变基础设施
	- 对于容器跑的业务，要么新增一个，要么不动，以免出现问题 
- nsenter
	- `yum install -y util-linux`。为`namespace enter`的缩写
- docker参数
	<pre># docker --help
	Usage: docker [OPTIONS] COMMAND [arg...]
	       docker daemon [ --help | ... ]
	       docker [ --help | -v | --version ]
	
	A self-sufficient runtime for containers.
	
	Options:
	
	  --config=~/.docker              Location of client config files
	  -D, --debug                     Enable debug mode
	  -H, --host=[]                   Daemon socket(s) to connect to
	  -h, --help                      Print usage
	  -l, --log-level=info            Set the logging level
	  --tls                           Use TLS; implied by --tlsverify
	  --tlscacert=~/.docker/ca.pem    Trust certs signed only by this CA
	  --tlscert=~/.docker/cert.pem    Path to TLS certificate file
	  --tlskey=~/.docker/key.pem      Path to TLS key file
	  --tlsverify                     Use TLS and verify the remote
	  -v, --version                   Print version information and quit
	
	Commands:
	    attach    Attach to a running container
	    build     Build an image from a Dockerfile
	    commit    Create a new image from a container's changes
	    cp        Copy files/folders between a container and the local filesystem
	    create    Create a new container
	    diff      Inspect changes on a container's filesystem
	    events    Get real time events from the server
	    exec      Run a command in a running container
	    export    Export a container's filesystem as a tar archive
	    history   Show the history of an image
	    images    List images
	    import    Import the contents from a tarball to create a filesystem image
	    info      Display system-wide information
	    inspect   Return low-level information on a container or image
	    kill      Kill a running container
	    load      Load an image from a tar archive or STDIN
	    login     Register or log in to a Docker registry
	    logout    Log out from a Docker registry
	    logs      Fetch the logs of a container
	    network   Manage Docker networks
	    pause     Pause all processes within a container
	    port      List port mappings or a specific mapping for the CONTAINER
	    ps        List containers
	    pull      Pull an image or a repository from a registry
	    push      Push an image or a repository to a registry
	    rename    Rename a container
	    restart   Restart a container
	    rm        Remove one or more containers
	    rmi       Remove one or more images
	    run       Run a command in a new container
	    save      Save an image(s) to a tar archive
	    search    Search the Docker Hub for images
	    start     Start one or more stopped containers
	    stats     Display a live stream of container(s) resource usage statistics
	    stop      Stop a running container
	    tag       Tag an image into a repository
	    top       Display the running processes of a container
	    unpause   Unpause all processes within a container
	    update    Update resources of one or more containers
	    version   Show the Docker version information
	    volume    Manage Docker volumes
	    wait      Block until a container stops, then print its exit code</pre> 
- 获取一个docker 容器的进程ID并进入改容器：
	<pre># docker inspect -f "{{ .State.Pid }}"  mydocker 
	21411`
	nsenter -t 21411 -m -u -i -n -p
	---参数说明
	-t :target process to get namespaces from
	-m :enter mount namespace
	-u :enter UTS namespace (hostname etc)
	-i :enter System V IPC namespace
	-n :enter network namespace
	-p :enter pid namespace</pre>
- 小结：进入容器脚本
	<pre># vi continer.sh
	#!/bin/bash
	#use nsenter access docker
	
	docker_in() {
	  Name_ID=$1
	  Pid=$(docker inspect -f "{{ .State.Pid }}" ${Name_ID})
	  nsenter -t $Pid -m -u -i -n -p
	}
	
	docker_in $1</pre>
	>然后使用salt批量分发下去。另一个进入的容器的命令的：
	>`docker exec -it mydocker /bin/bash`

###Docker能干什么
####主要功能：
1. simplifying configuration(简化配置，环境和代码在一起)
2. Code pipeline Management(代码流水线管理)
3. developer productivity(提高开发效率)
4. app isolation
5. server consolidation
6. debugging capabilities
7. Multi-tenancy(多租户)
8. rapid deployment（快速部署）

####小结
- 面向产品： 产品交付
- 面向开发： 简化环境配置
- 面向测试： 多版本测试
- 面向运维： 环境一致性
- 面向架构： 自动化扩容（微服务）

###docke-网络访问
- 随机映射
	- docker run -P
		>示例：`docker run -d -P nginx`
- 指定映射
	-  -p hostPort:containerPort
	-  -p ip:hostPort:containerPort
		>示例： `docker run -d -p 10.0.0.160:81:80 --name mynginx nginx`
	-  -p ip::containerPort
	-  -p hostPort:containerPort
	-  -p hostPort:containerPort:udp
	-  -p 81:80 -p 442:443
###docker-数据管理  
- 数据卷
	>修改立刻生效，不会影响性能，挂载物理机文件到容器里。
	- 用法1：
		> -v /data
		> `# docker run -d --name nginx-volume-test1 -v /data nginx`
		> -v /srt:/drt #移植性差
		> `# docker run -d --name nginx-volume-test1 -v /data/nginx-volume-test2:/data nginx`
		> 查看挂载信息
		> `# docker inspect -f {{.Mounts}} nginx-volume-test1`
- 数据卷容器
	>作用：相当于NFS的功能，只要1个起作用了，其他的便都可以直接使用,挂载已存在的数据卷上
	> `# docker run -it --name volume-test3 --volumes-from nginx-volume-test2 centos /bin/bash`
- UFS
###docker-镜像构建
- 两种方式
	- 手动构建
		1. 基于centos构建
			`docker run --name mynginx -it centos`
		2. 安装epel源
			` rpm -ivh http://mirrors.aliyun.com/epel/epel-release-latest-7.noarch.rpm`
		3. 安装nginx
			`yum install nginx`
		4. 修改nginx配置 使其在前台运行
			<pre>vi /etc/nginx/nginx.conf
			daemon off;</pre>
		5. 提交，生产镜像
			<pre># docker commit -m "my nginx" faa833c44b9d oldboy/mynginx:v1
			# 仓库名/镜像名：版本。保存在本地</pre>
		6. 测试
			`docker run -d --name n3 -p 81:80 oldboy/mynginx:v1 nginx`
	- Dockerfile构建
		1. 配置dockerfile文件
			<pre># vi Dockerfile 
			#This Dockerfile 
			#base image
			FROM centos
			
			#Maintainer
			MAINTAINER Anthony.zhou xxx@gmail.com
			
			#commands
			RUN rpm -ivh http://mirrors.aliyun.com/epel/epel-release-latest-7.noarch.rpm
			RUN yum install -y nginx && yum clean all
			RUN echo "daemon off;" >> /etc/nginx/nginx.conf
			ADD index.html /usr/share/nginx/html/index.html  #这里可以添加配置文件
			EXPOSE 80
			CMD ["nginx"]</pre>
		2. 生成配置相关页面`index.html`
			`echo "hh test">index.html`
		3. 构建镜像
			`docker build -t mynginx:v2 .`
		4. 启动容器测试
			`docker run --name ngv2 -d -p 82:80 mynginx:v2`
		5. 访问页面
	- dockerfile命令讲解
		- FROM
			>指定镜像基础
		- MAINTAINER
			>指定维护者信息
		- RUN
			>在命令前面加上RUN即可
		- ADD
			>copy文件，会自动解压
		- WORKDIR
			>设置当前工作目录，即`CD`到了某个目录
		- VOLUME
			>设置卷，挂载主机目录
		- EXPOSE
			>指定对外的端口
		- CMD 
			>指定镜像启动后要干什么事
###docker实践
- 分成设计
- 从下往上，依次为：系统层、环境层、应用层 
####生产设计实例
- 目录结构
	- system
		- centos
		- ubuntu
		- centos-ssh
	- runtime
		- php
		- java
		- python
	- app
		- xxx-api
		- xxx-admin
	>大概目录，提交到github上
- 以centos实例
	-  supervisor 多进程管理
	- 基础的系统级别镜像
		<pre>#Docker for centos
		FROM centos
		MAINTAINER zhou
		ADD epel.repo /etc/yum.repo.d/
		 
		RUN yum install -y wget mysql-devel supervisor git redis tree net-tools sudo ps
		misc && yum clean all
		##构建镜像
		# docker build -t oldboy/centos:base .</pre> 
- 配置python环境
- supervisor 多进程管理
- centos镜像加入ssh
	- 在基础镜像上创建其他环境
	<pre>[root@cobbler cent-ssh]# tree
	.
	|-- Dockerfile
	`-- epel.repo
	# cat Dockerfile 
	#Docker for centos
	FROM centos
	MAINTAINER zhou
	ADD epel.repo /etc/yum.repo.d/
	
	RUN yum install -y openssh-clients openssl-devel openssh-server wget mysql-devel supervisor git redis tree net-tools sudo psmisc && yum clean all
	
	#for sshd
	RUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key
	RUN ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key 
	RUN echo "root:oldboy" | chpasswd</pre>
- 配置python环境
- requirements方式（模仿openstack）
	- 流程
		- reqirements.txt
		- XXX-admin
		- pip install -r requirements.txt
		- python-demo.ini(参考supervisor.conf)
	- 以app为例
		<pre>[root@cobbler shop-api]# tree
		.
		|-- Dockerfile
		|-- app-supervisor.ini
		|-- app.py
		`-- requirements.txt
		------
		# cat Dockerfile 
		#Docker for python
		FROM oldboy/python-ssh
		
		#maintainer
		MAINTAINER zhou
		
		#python env
		RUN useradd -s /sbin/nologin -M www
		
		ADD app.py /opt/app.py
		ADD requirements /opt/
		ADD app-supervisor.ini /etc/supervisord.d/ 
		
		#upgrade pip
		RUN /usr/bin/pip2.7 install -r /opt/requirements.txt
		
		#port
		EXPOSE 22 5000
		
		#CMD
		CMD ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]
		------
		[root@cobbler shop-api]# vim app-supervisor.ini
		[program:shop-api]
		command=/usr/bin/python2.7 /opt/app.py
		process_name=%(program_name)s
		autostart=false
		user=www
		stdout_logfile=/a/path
		stderr_logfile=/a/path
		
		[program:sshd]
		command=/usr/sbin/sshd -D
		process_name=%(program_name)s
		autostart=false</pre> 